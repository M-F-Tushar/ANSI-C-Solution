4.1 State whether the following statements are true or false:
(a) The expression !(x<=y) is the same as the expression x>y.
Answer: True
Explanation: The logical NOT operator (!) negates the condition. So, !(x<=y) means "not (x is less than or equal to y)," which is equivalent to x > y.
(b) A unary expression consists of only one operand with no operators.
Answer: False
Explanation: A unary expression involves one operand and one unary operator (e.g., -x, ++x).
(c) All arithmetic operators have the same level of precedence.
Answer: False
Explanation: Arithmetic operators have different levels of precedence. For example, multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).
(d) An expression statement is terminated with a period.
Answer: False
Explanation: In C, an expression statement is terminated with a semicolon (;), not a period.
(e) The operators <=, >=, and != all enjoy the same level of priority.
Answer: False
Explanation: Relational operators like <= and >= have the same precedence, but != (inequality) has lower precedence.
(f) The modulus operator % can be used only with integers.
Answer: True
Explanation: The modulus operator % works only with integer operands. It cannot be applied to floating-point numbers.
(g) In C, if a data item is zero, it is considered false.
Answer: True
Explanation: In C, zero is treated as false, and any non-zero value is treated as true.
(h) During the evaluation of mixed expressions, an implicit cast is generated automatically.
Answer: True
Explanation: When evaluating mixed expressions (e.g., int and float), C automatically performs type conversion (implicit casting) to ensure compatibility.
(i) An explicit cast can be used to change the expression.
Answer: True
Explanation: Explicit casting allows you to manually convert a value from one type to another (e.g., (int)3.14).
(j) Associativity is used to decide which of several different expressions is evaluated first.
Answer: False
Explanation: Associativity determines the order in which operators of the same precedence are evaluated (left-to-right or right-to-left).
(k) Parentheses can be used to change the order of evaluation of expressions.
Answer: True
Explanation: Parentheses override the default precedence rules, allowing you to control the order of evaluation.
(l) During modulo division, the sign of the result is positive if both operands are of the same sign.
Answer: True
Explanation: The result of the modulo operation (%) has the same sign as the dividend (the left operand).
